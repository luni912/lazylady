{"remainingRequest":"/Users/rubyhuang/lazylady/lazylady/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/rubyhuang/lazylady/lazylady/src/components/WeatherForecast.vue?vue&type=style&index=0&id=a70e46e2&scoped=true&lang=css","dependencies":[{"path":"/Users/rubyhuang/lazylady/lazylady/src/components/WeatherForecast.vue","mtime":1754884118557},{"path":"/Users/rubyhuang/lazylady/lazylady/node_modules/css-loader/dist/cjs.js","mtime":1754884414790},{"path":"/Users/rubyhuang/lazylady/lazylady/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1754884420157},{"path":"/Users/rubyhuang/lazylady/lazylady/node_modules/postcss-loader/src/index.js","mtime":1754884415561},{"path":"/Users/rubyhuang/lazylady/lazylady/node_modules/cache-loader/dist/cjs.js","mtime":1754884413571},{"path":"/Users/rubyhuang/lazylady/lazylady/node_modules/vue-loader-v16/dist/index.js","mtime":1754884415162}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci53ZWF0aGVyLWZvcmVjYXN0IHsKICBtYXJnaW46IDIwcHg7Cn0K"},{"version":3,"sources":["/Users/rubyhuang/lazylady/lazylady/src/components/WeatherForecast.vue"],"names":[],"mappings":";AAiDA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACd","file":"/Users/rubyhuang/lazylady/lazylady/src/components/WeatherForecast.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"weather-forecast\">\n    <h2>Weather Forecast</h2>\n    <select v-model=\"selectedRegion\" @change=\"fetchWeather\">\n      <option v-for=\"region in regions\" :key=\"region\" :value=\"region\">{{ region }}</option>\n    </select>\n    <div v-if=\"weatherData\">\n      <h3>Forecast for {{ selectedRegion }}</h3>\n      <p>Temperature: {{ weatherData.temperature }} Â°C</p>\n      <p>Condition: {{ weatherData.condition }}</p>\n      <p>Humidity: {{ weatherData.humidity }}%</p>\n    </div>\n    <button @click=\"fetchWeather\">Get Weather</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      selectedRegion: '',\n      regions: ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Miami'],\n      weatherData: null,\n    };\n  },\n  methods: {\n    fetchWeather() {\n      // Replace with your weather API endpoint\n      const apiKey = 'YOUR_API_KEY';\n      const url = `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${this.selectedRegion}`;\n\n      fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          this.weatherData = {\n            temperature: data.current.temp_c,\n            condition: data.current.condition.text,\n            humidity: data.current.humidity,\n          };\n        })\n        .catch(error => {\n          console.error('Error fetching weather data:', error);\n        });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.weather-forecast {\n  margin: 20px;\n}\n</style>"]}]}